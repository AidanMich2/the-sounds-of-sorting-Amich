package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List <SortEvent<T>> arrList = new  ArrayList <> ();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length - 1; j++) {
                int compare = arr[j].compareTo(arr[j+1]);
                arrList.add (new CompareEvent<>(j, j+1));//compare event
                if(compare > 0) {
                    swap(arr, j, j+1);
                    arrList.add (new SwapEvent<>(j, j+1));//swap event
                }
            }
        }
        return arrList;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(
            T[] arr) {
        List <SortEvent<T>> arrList = new  ArrayList <> ();
        for (int i = 0; i < arr.length; i++) {
            int minIdx = i;
            for (int j = i; j < arr.length; j++) {
                int compare = arr[j].compareTo(arr[minIdx]);
                arrList.add (new CompareEvent<>(j, minIdx));//compare event
                if (compare < 0) {
                    minIdx = j;
                }
            }
            swap(arr, i, minIdx);
            arrList.add (new SwapEvent<>(i, minIdx));//swap event
        }
        return arrList;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(
            T[] arr) {
        List <SortEvent<T>> arrList = new  ArrayList <> ();
        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                int compare = arr[j].compareTo(arr[i]);
                arrList.add (new CompareEvent<>(j,i));//compare event
                if (compare >= 0) {
                    T curVal = arr[i];
                    for (int k = i; k > j; k--) {
                        arr[k] = arr[k-1];
                    }
                    arr[j] = curVal;
                    arrList.add (new SwapEvent<>(j, i));//swap event
                }
            }
        }
        return arrList;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */

    public static <T extends Comparable<? super T>> void merge(T[] arr, int b1, int e1, int b2, int e2, List<SortEvent<T>> arrList) {

        // @SuppressWarnings("unchecked")
        T[] copy = Arrays.copyOf(arr, arr.length); 
        int index = b1;
        while (b1 < e1 && b2 < e2) {
            if (arr[b1].compareTo(arr[b2]) < 0) {
                copy[index] = arr[b1];
                b1++;
                arrList.add (new CompareEvent<>(b1, b2));//compare event
            } else {
                copy[index] = arr[b2];
                b2++;
            }
            index++;
        }
        while (b1 < e1) {
            copy[index] = arr[b1];
            b1++;
            index++;
        }
        while (b2 < e2) {
            copy[index] = arr[b2];
            b2++;
            index++;
        }

        for (int i = 0; i < arr.length; i++) {
            arr[i] = copy[i];
            arrList.add (new CopyEvent<>(i, copy[i]));//compare event
            //this might be a copy event
        }

    }

    public static <T extends Comparable<? super T>> void splice(T[] arr, int begin, int end, List<SortEvent<T>> arrList) {
        
        int middle = begin + (end - begin) / 2;
    
        if (end - begin > 1) {
            splice(arr, begin, middle, arrList);
            splice(arr, middle, end, arrList);
        }

        // Merge function here
        merge(arr, begin, middle, middle, end, arrList);
    }


    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(
            T[] arr) {
        List <SortEvent<T>> arrList = new  ArrayList <> ();        
        int begin = 0;
        int end = arr.length;
        splice(arr, begin, end, arrList);
        return arrList;
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */

   
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort (T[] arr){
        List <SortEvent<T>> arrList = new  ArrayList <> ();
        if (arr == null || arr.length < 2) {
            return arrList;
        }
        quickSortHelper(arr, 0, arr.length - 1, arrList);
        return arrList;
    }


    private static <T extends Comparable<? super T>> void quickSortHelper (T[] arr, int lo, int hi, List<SortEvent<T>> arrList) {
        if (lo >= hi){
            return;
        }
        int p = partition(arr, lo, hi, arrList);    
        quickSortHelper(arr, lo, p - 1, arrList);
        quickSortHelper(arr, p + 1, hi, arrList);
    }

    private static <T extends Comparable<? super T>> int partition(T[] arr, int lo, int hi, List<SortEvent<T>> arrList) {
        T pivot = arr[hi];
        int i = lo - 1;
        for (int j = lo; j < hi; j++) {
            if (arr[j].compareTo(pivot) <= 0) {
                arrList.add (new CompareEvent<>(j, hi));//compare event
                i++;
                T temp = arr[i]; 
                arr[i] = arr[j]; 
                arr[j] = temp;
                arrList.add (new SwapEvent<>(i, j));//swap event
            }
        }
        T temp = arr[i + 1]; 
        arr[i + 1] = arr[hi]; 
        arr[hi] = temp;
        arrList.add (new SwapEvent<>(i +1, hi));//swap event
        return i + 1;
    }

    /**
     * Sorts the array according to the bogo sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */

     public static <T extends Comparable<? super T>> List<SortEvent<T>> bogoSort(T[] arr) {
        List <SortEvent<T>> arrList = new  ArrayList <> ();
        while(true){
            boolean isSorted = true;
            for(int i = 0; i < arr.length-1; i++){
                if(arr[i].compareTo(arr[i+1]) > 0){
                    arrList.add (new CompareEvent<>(i, i+1));//compare event
                    isSorted = false;
                }
            }
            if(isSorted){
                break;
            }
            for(int i = 0; i < arr.length; i++){
                int temp = (int) (Math.random() * (i+1));
                swap(arr, i, temp);
                arrList.add (new SwapEvent<>(i, temp));//swap event
            }
        }
        return arrList;
    }

    public static <T> void eventSort (T [] l, List<SortEvent<T>> events){
        for (int i = 0; i < events.size (); i++){
            events.get(i).apply(l);
        }
    }

}
